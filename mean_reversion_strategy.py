# -*- coding: utf-8 -*-
"""Untitled32.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1elAd6Du09ihX3O4qc7nAXvInlWXAmlgc
"""

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

# Step 1: Download historical stock data (e.g., TCS from Nifty 50)
ticker = 'TCS.NS'  # Replace with any Nifty 50 stock
data = yf.download(ticker, start='2022-01-01', end='2024-12-31')

# Flatten the column index
data.columns = data.columns.droplevel(1)

# Step 2: Calculate moving averages
data['SMA_10'] = data['Close'].rolling(window=10).mean()
data['SMA_30'] = data['Close'].rolling(window=30).mean()

# Step 3: Create buy/sell signals based on mean-reversion logic
data['Signal'] = 0
data.loc[data['Close'] < 0.98 * data['SMA_30'], 'Signal'] = 1  # Buy
data.loc[data['Close'] > 1.02 * data['SMA_30'], 'Signal'] = -1  # Sell

# Step 4: Shift the signal for next-day execution
data['Position'] = data['Signal'].shift(1)

# Step 5: Calculate returns
data['Market Return'] = data['Close'].pct_change()
data['Strategy Return'] = data['Market Return'] * data['Position']

# Step 6: Calculate cumulative returns
data['Cumulative Market Returns'] = (1 + data['Market Return']).cumprod()
data['Cumulative Strategy Returns'] = (1 + data['Strategy Return']).cumprod()

# Step 7: Plot the results
plt.figure(figsize=(14, 7))
plt.plot(data['Cumulative Market Returns'], label='Market Return', linestyle='--')
plt.plot(data['Cumulative Strategy Returns'], label='Strategy Return', linewidth=2)
plt.title('Mean-Reversion Strategy vs Market - TCS')
plt.xlabel('Date')
plt.ylabel('Cumulative Returns')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

import numpy as np

# Drop initial NaNs
data.dropna(inplace=True)

# 1. Total Returns
total_market_return = data['Cumulative Market Returns'].iloc[-1] - 1
total_strategy_return = data['Cumulative Strategy Returns'].iloc[-1] - 1

# 2. Annualized Volatility
volatility = data['Strategy Return'].std() * np.sqrt(252)

# 3. Sharpe Ratio (assumes risk-free rate = 0)
sharpe_ratio = data['Strategy Return'].mean() / data['Strategy Return'].std() * np.sqrt(252)

# 4. Maximum Drawdown
cum_returns = data['Cumulative Strategy Returns']
rolling_max = cum_returns.cummax()
drawdown = cum_returns / rolling_max - 1
max_drawdown = drawdown.min()

# Print summary
print("ðŸ“ˆ Strategy Performance Summary:")
print(f"Total Strategy Return     : {total_strategy_return:.2%}")
print(f"Total Market Return       : {total_market_return:.2%}")
print(f"Annualized Volatility     : {volatility:.2%}")
print(f"Sharpe Ratio              : {sharpe_ratio:.2f}")
print(f"Maximum Drawdown          : {max_drawdown:.2%}")

